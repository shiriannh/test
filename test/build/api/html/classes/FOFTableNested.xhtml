<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html SYSTEM "about:legacy-compat">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
  <head>
    <title>phpDox - FOFTableNested</title>
    <link rel="stylesheet" type="text/css" href="../css/style.css" media="screen"/>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
  </head>
  <body>
    <nav class="topnav">
      <ul>
        <li>
          <div class="logo"><span>/**</span>phpDox</div>
        </li>
        <li class="separator">
          <a href="../index.xhtml">Overview</a>
        </li>
        <li class="separator">
          <a href="../namespaces.xhtml">Namespaces</a>
        </li>
        <li>
          <a href="../interfaces.xhtml">Interfaces</a>
        </li>
        <li>
          <a href="../classes.xhtml">Classes</a>
        </li>
        <li>
          <a href="../traits.xhtml">Traits</a>
        </li>
        <li class="separator">
          <a href="../source/index.xhtml">Source</a>
        </li>
      </ul>
    </nav>
    <div id="mainstage">
      <div class="box">
        <ul class="breadcrumb">
          <li>
            <a href="../index.xhtml">Overview</a>
          </li>
          <li class="separator">
            <a href="../classes.xhtml">Classes</a>
          </li>
          <li class="separator">FOFTableNested</li>
        </ul>
      </div>
      <nav class="box">
        <ul>
          <li>
            <a href="#introduction">Introduction</a>
          </li>
          <li>
            <a href="#synopsis">Synopsis</a>
          </li>
          <li>
            <a href="#hierarchy">Hierarchy</a>
          </li>
          <li>
            <a href="#members">Members</a>
          </li>
          <li>
            <a href="#methods">Methods</a>
          </li>
          <li>
            <a href="../source/libraries/fof/table/nested.php.xhtml#line21">Source</a>
          </li>
        </ul>
      </nav>
      <section>
        <h1 id="introduction"><small>\</small>FOFTableNested</h1>
        <h4>A class to manage tables holding nested sets (hierarchical data)</h4>
        <p/>
        <ul/>
        <h2 id="synopsis">Synopsis</h2>
        <div class="synopsis">class FOFTableNested
                extends <a title="FOFTable" href="../classes/FOFTable.xhtml">FOFTable</a>
            {<br/><ul class="none"><li>// members</li><li>protected <a href="#members">$treeDepth</a> =
                        null;
                    </li><li>protected <a href="#members">$treeRoot</a> =
                        null;
                    </li><li>protected <a href="#members">$treeParent</a> =
                        null;
                    </li><li>protected boolean <a href="#members">$treeNestedGet</a> =
                        false;
                    </li><li>protected array <a href="#members">$whereClauses</a> =
                        ;
                    </li></ul><ul class="none"><li>// methods</li><li>public void <a title="FOFTableNested" href="../classes/FOFTableNested/__construct.xhtml">__construct</a>()
                    </li><li>public boolean <a title="FOFTableNested" href="../classes/FOFTableNested/check.xhtml">check</a>()
                    </li><li>public boolean <a title="FOFTableNested" href="../classes/FOFTableNested/delete.xhtml">delete</a>()
                    </li><li>protected void <a title="FOFTableNested" href="../classes/FOFTableNested/onAfterDelete.xhtml">onAfterDelete</a>()
                    </li><li>public void <a title="FOFTableNested" href="../classes/FOFTableNested/reorder.xhtml">reorder</a>()
                    </li><li>public void <a title="FOFTableNested" href="../classes/FOFTableNested/move.xhtml">move</a>()
                    </li><li>public FOFTableNested <a title="FOFTableNested" href="../classes/FOFTableNested/create.xhtml">create</a>()
                    </li><li>public self|FOFTableNested <a title="FOFTableNested" href="../classes/FOFTableNested/copy.xhtml">copy</a>()
                    </li><li>public void <a title="FOFTableNested" href="../classes/FOFTableNested/reset.xhtml">reset</a>()
                    </li><li>public FOFTableNested <a title="FOFTableNested" href="../classes/FOFTableNested/insertAsRoot.xhtml">insertAsRoot</a>()
                    </li><li>public $this <a title="FOFTableNested" href="../classes/FOFTableNested/insertAsFirstChildOf.xhtml">insertAsFirstChildOf</a>()
                    </li><li>public $this <a title="FOFTableNested" href="../classes/FOFTableNested/insertAsLastChildOf.xhtml">insertAsLastChildOf</a>()
                    </li><li>public $this <a title="FOFTableNested" href="../classes/FOFTableNested/insertAsChildOf.xhtml">insertAsChildOf</a>()
                    </li><li>public $this <a title="FOFTableNested" href="../classes/FOFTableNested/insertLeftOf.xhtml">insertLeftOf</a>()
                    </li><li>public $this <a title="FOFTableNested" href="../classes/FOFTableNested/insertRightOf.xhtml">insertRightOf</a>()
                    </li><li>public $this <a title="FOFTableNested" href="../classes/FOFTableNested/insertAsSiblingOf.xhtml">insertAsSiblingOf</a>()
                    </li><li>public $this <a title="FOFTableNested" href="../classes/FOFTableNested/moveLeft.xhtml">moveLeft</a>()
                    </li><li>public $this <a title="FOFTableNested" href="../classes/FOFTableNested/moveRight.xhtml">moveRight</a>()
                    </li><li>public $this <a title="FOFTableNested" href="../classes/FOFTableNested/moveToLeftOf.xhtml">moveToLeftOf</a>()
                    </li><li>public $this <a title="FOFTableNested" href="../classes/FOFTableNested/moveToRightOf.xhtml">moveToRightOf</a>()
                    </li><li>public $this <a title="FOFTableNested" href="../classes/FOFTableNested/makeNextSiblingOf.xhtml">makeNextSiblingOf</a>()
                    </li><li>public $this <a title="FOFTableNested" href="../classes/FOFTableNested/makeSiblingOf.xhtml">makeSiblingOf</a>()
                    </li><li>public $this <a title="FOFTableNested" href="../classes/FOFTableNested/makePreviousSiblingOf.xhtml">makePreviousSiblingOf</a>()
                    </li><li>public $this <a title="FOFTableNested" href="../classes/FOFTableNested/makeFirstChildOf.xhtml">makeFirstChildOf</a>()
                    </li><li>public $this <a title="FOFTableNested" href="../classes/FOFTableNested/makeLastChildOf.xhtml">makeLastChildOf</a>()
                    </li><li>public $this <a title="FOFTableNested" href="../classes/FOFTableNested/makeChildOf.xhtml">makeChildOf</a>()
                    </li><li>public $this <a title="FOFTableNested" href="../classes/FOFTableNested/makeRoot.xhtml">makeRoot</a>()
                    </li><li>public int|mixed <a title="FOFTableNested" href="../classes/FOFTableNested/getLevel.xhtml">getLevel</a>()
                    </li><li>public FOFTableNested <a title="FOFTableNested" href="../classes/FOFTableNested/getParent.xhtml">getParent</a>()
                    </li><li>public bool <a title="FOFTableNested" href="../classes/FOFTableNested/isRoot.xhtml">isRoot</a>()
                    </li><li>public bool <a title="FOFTableNested" href="../classes/FOFTableNested/isLeaf.xhtml">isLeaf</a>()
                    </li><li>public bool <a title="FOFTableNested" href="../classes/FOFTableNested/isChild.xhtml">isChild</a>()
                    </li><li>public bool <a title="FOFTableNested" href="../classes/FOFTableNested/isDescendantOf.xhtml">isDescendantOf</a>()
                    </li><li>public bool <a title="FOFTableNested" href="../classes/FOFTableNested/isSelfOrDescendantOf.xhtml">isSelfOrDescendantOf</a>()
                    </li><li>public bool <a title="FOFTableNested" href="../classes/FOFTableNested/isAncestorOf.xhtml">isAncestorOf</a>()
                    </li><li>public bool <a title="FOFTableNested" href="../classes/FOFTableNested/isSelfOrAncestorOf.xhtml">isSelfOrAncestorOf</a>()
                    </li><li>public bool <a title="FOFTableNested" href="../classes/FOFTableNested/equals.xhtml">equals</a>()
                    </li><li>public bool <a title="FOFTableNested" href="../classes/FOFTableNested/insideSubtree.xhtml">insideSubtree</a>()
                    </li><li>public bool <a title="FOFTableNested" href="../classes/FOFTableNested/inSameScope.xhtml">inSameScope</a>()
                    </li><li>protected void <a title="FOFTableNested" href="../classes/FOFTableNested/scopeAncestorsAndSelf.xhtml">scopeAncestorsAndSelf</a>()
                    </li><li>protected void <a title="FOFTableNested" href="../classes/FOFTableNested/scopeAncestors.xhtml">scopeAncestors</a>()
                    </li><li>protected void <a title="FOFTableNested" href="../classes/FOFTableNested/scopeSiblingsAndSelf.xhtml">scopeSiblingsAndSelf</a>()
                    </li><li>protected void <a title="FOFTableNested" href="../classes/FOFTableNested/scopeSiblings.xhtml">scopeSiblings</a>()
                    </li><li>protected void <a title="FOFTableNested" href="../classes/FOFTableNested/scopeLeaves.xhtml">scopeLeaves</a>()
                    </li><li>protected void <a title="FOFTableNested" href="../classes/FOFTableNested/scopeDescendantsAndSelf.xhtml">scopeDescendantsAndSelf</a>()
                    </li><li>protected void <a title="FOFTableNested" href="../classes/FOFTableNested/scopeDescendants.xhtml">scopeDescendants</a>()
                    </li><li>protected void <a title="FOFTableNested" href="../classes/FOFTableNested/scopeImmediateDescendants.xhtml">scopeImmediateDescendants</a>()
                    </li><li>public void <a title="FOFTableNested" href="../classes/FOFTableNested/withoutNode.xhtml">withoutNode</a>()
                    </li><li>protected void <a title="FOFTableNested" href="../classes/FOFTableNested/scopeWithoutSelf.xhtml">scopeWithoutSelf</a>()
                    </li><li>protected void <a title="FOFTableNested" href="../classes/FOFTableNested/scopeWithoutRoot.xhtml">scopeWithoutRoot</a>()
                    </li><li>public FOFTableNested <a title="FOFTableNested" href="../classes/FOFTableNested/getRoot.xhtml">getRoot</a>()
                    </li><li>public FOFDatabaseIterator <a title="FOFTableNested" href="../classes/FOFTableNested/getAncestorsAndSelf.xhtml">getAncestorsAndSelf</a>()
                    </li><li>public FOFDatabaseIterator <a title="FOFTableNested" href="../classes/FOFTableNested/getAncestorsAndSelfWithoutRoot.xhtml">getAncestorsAndSelfWithoutRoot</a>()
                    </li><li>public FOFDatabaseIterator <a title="FOFTableNested" href="../classes/FOFTableNested/getAncestors.xhtml">getAncestors</a>()
                    </li><li>public FOFDatabaseIterator <a title="FOFTableNested" href="../classes/FOFTableNested/getAncestorsWithoutRoot.xhtml">getAncestorsWithoutRoot</a>()
                    </li><li>public FOFDatabaseIterator <a title="FOFTableNested" href="../classes/FOFTableNested/getSiblingsAndSelf.xhtml">getSiblingsAndSelf</a>()
                    </li><li>public FOFDatabaseIterator <a title="FOFTableNested" href="../classes/FOFTableNested/getSiblings.xhtml">getSiblings</a>()
                    </li><li>public FOFDatabaseIterator <a title="FOFTableNested" href="../classes/FOFTableNested/getLeaves.xhtml">getLeaves</a>()
                    </li><li>public FOFDatabaseIterator <a title="FOFTableNested" href="../classes/FOFTableNested/getDescendantsAndSelf.xhtml">getDescendantsAndSelf</a>()
                    </li><li>public FOFDatabaseIterator <a title="FOFTableNested" href="../classes/FOFTableNested/getDescendants.xhtml">getDescendants</a>()
                    </li><li>public FOFDatabaseIterator <a title="FOFTableNested" href="../classes/FOFTableNested/getImmediateDescendants.xhtml">getImmediateDescendants</a>()
                    </li><li>public array <a title="FOFTableNested" href="../classes/FOFTableNested/getNestedList.xhtml">getNestedList</a>()
                    </li><li>public FOFTableNested|null <a title="FOFTableNested" href="../classes/FOFTableNested/findByPath.xhtml">findByPath</a>()
                    </li><li>public void <a title="FOFTableNested" href="../classes/FOFTableNested/isValid.xhtml">isValid</a>()
                    </li><li>public void <a title="FOFTableNested" href="../classes/FOFTableNested/rebuild.xhtml">rebuild</a>()
                    </li><li>protected FOFTableNested <a title="FOFTableNested" href="../classes/FOFTableNested/resetTreeCache.xhtml">resetTreeCache</a>()
                    </li><li>public $this <a title="FOFTableNested" href="../classes/FOFTableNested/whereRaw.xhtml">whereRaw</a>()
                    </li><li>protected JDatabaseQuery <a title="FOFTableNested" href="../classes/FOFTableNested/buildQuery.xhtml">buildQuery</a>()
                    </li><li>public FOFDatabaseIterator <a title="FOFTableNested" href="../classes/FOFTableNested/get.xhtml">get</a>()
                    </li></ul>

            }<br/></div>
        <h2 id="hierarchy">Hierarchy</h2>
        <div class="styled">
          <h4>Extends</h4>
          <ul>
            <li>
              <a title="FOFTable" href="../classes/FOFTable.xhtml">FOFTable</a>
            </li>
          </ul>
        </div>
        <h2 id="members">Members</h2>
        <div class="styled members">
          <h4>protected</h4>
          <ul class="members">
            <li id="treeDepth">
              <strong>$treeDepth</strong>
              <br/>
              <span class="indent">@var int The level (depth) of this node in the tree</span>
            </li>
            <li id="treeNestedGet">
              <strong>$treeNestedGet</strong>
              <br/>
              <span class="indent">@var bool Should I perform a nested get (used to query ascendants/descendants)</span>
            </li>
            <li id="treeParent">
              <strong>$treeParent</strong>
              <br/>
              <span class="indent">@var FOFTableNested The parent node of ourselves</span>
            </li>
            <li id="treeRoot">
              <strong>$treeRoot</strong>
              <br/>
              <span class="indent">@var FOFTableNested The root node in the tree</span>
            </li>
            <li id="whereClauses">
              <strong>$whereClauses</strong>
              <br/>
              <span class="indent">@var   array  A collection of custom, additional where clauses to apply during buildQuery</span>
            </li>
          </ul>
        </div>
        <h2 id="methods">Methods</h2>
        <div class="styled">
          <h4>protected</h4>
          <ul>
            <li id="buildQuery"><a title="FOFTableNested" href="../classes/FOFTableNested/buildQuery.xhtml">buildQuery()</a>
                — Builds the query for the get() method</li>
            <li id="onAfterDelete">
              <a title="FOFTableNested" href="../classes/FOFTableNested/onAfterDelete.xhtml">onAfterDelete()</a>
            </li>
            <li id="resetTreeCache"><a title="FOFTableNested" href="../classes/FOFTableNested/resetTreeCache.xhtml">resetTreeCache()</a>
                — Resets cached values used to speed up querying the tree</li>
            <li id="scopeAncestors"><a title="FOFTableNested" href="../classes/FOFTableNested/scopeAncestors.xhtml">scopeAncestors()</a>
                — get() will return all ancestor nodes but not ourselves</li>
            <li id="scopeAncestorsAndSelf"><a title="FOFTableNested" href="../classes/FOFTableNested/scopeAncestorsAndSelf.xhtml">scopeAncestorsAndSelf()</a>
                — get() will return all ancestor nodes and ourselves</li>
            <li id="scopeDescendants"><a title="FOFTableNested" href="../classes/FOFTableNested/scopeDescendants.xhtml">scopeDescendants()</a>
                — get() will return all descendants (even subtrees of subtrees!) but not ourselves</li>
            <li id="scopeDescendantsAndSelf"><a title="FOFTableNested" href="../classes/FOFTableNested/scopeDescendantsAndSelf.xhtml">scopeDescendantsAndSelf()</a>
                — get() will return all descendants (even subtrees of subtrees!) and ourselves</li>
            <li id="scopeImmediateDescendants"><a title="FOFTableNested" href="../classes/FOFTableNested/scopeImmediateDescendants.xhtml">scopeImmediateDescendants()</a>
                — get() will only return immediate descendants (first level children) of the current node</li>
            <li id="scopeLeaves"><a title="FOFTableNested" href="../classes/FOFTableNested/scopeLeaves.xhtml">scopeLeaves()</a>
                — get() will return only leaf nodes</li>
            <li id="scopeSiblings"><a title="FOFTableNested" href="../classes/FOFTableNested/scopeSiblings.xhtml">scopeSiblings()</a>
                — get() will return all sibling nodes but not ourselves</li>
            <li id="scopeSiblingsAndSelf"><a title="FOFTableNested" href="../classes/FOFTableNested/scopeSiblingsAndSelf.xhtml">scopeSiblingsAndSelf()</a>
                — get() will return all sibling nodes and ourselves</li>
            <li id="scopeWithoutRoot"><a title="FOFTableNested" href="../classes/FOFTableNested/scopeWithoutRoot.xhtml">scopeWithoutRoot()</a>
                — get() will not return our root if it's part of the query results</li>
            <li id="scopeWithoutSelf"><a title="FOFTableNested" href="../classes/FOFTableNested/scopeWithoutSelf.xhtml">scopeWithoutSelf()</a>
                — get() will not return ourselves if it's part of the query results</li>
          </ul>
          <h4>public</h4>
          <ul>
            <li id="__construct"><a title="FOFTableNested" href="../classes/FOFTableNested/__construct.xhtml">__construct()</a>
                — Public constructor. Overrides the parent constructor, making sure there are lft/rgt columns which make it compatible with nested sets.</li>
            <li id="check"><a title="FOFTableNested" href="../classes/FOFTableNested/check.xhtml">check()</a>
                — Overrides the automated table checks to handle the 'hash' column for faster searching</li>
            <li id="copy"><a title="FOFTableNested" href="../classes/FOFTableNested/copy.xhtml">copy()</a>
                — Makes a copy of the record, inserting it as the last child of the given node's parent.</li>
            <li id="create"><a title="FOFTableNested" href="../classes/FOFTableNested/create.xhtml">create()</a>
                — Create a new record with the provided data. It is inserted as the last child of the current node's parent</li>
            <li id="delete"><a title="FOFTableNested" href="../classes/FOFTableNested/delete.xhtml">delete()</a>
                — Delete a node, either the currently loaded one or the one specified in $id. If an $id is specified that node is loaded before trying to delete it. In the end the data model is reset. If the node has any children nodes they will be removed before the node itself is deleted.</li>
            <li id="equals"><a title="FOFTableNested" href="../classes/FOFTableNested/equals.xhtml">equals()</a>
                — Is $node this very node?</li>
            <li id="findByPath"><a title="FOFTableNested" href="../classes/FOFTableNested/findByPath.xhtml">findByPath()</a>
                — Locate a node from a given path, e.g. "/some/other/leaf"</li>
            <li id="get"><a title="FOFTableNested" href="../classes/FOFTableNested/get.xhtml">get()</a>
                — Returns a database iterator to retrieve records. Use the scope methods and the whereRaw method to define what exactly will be returned.</li>
            <li id="getAncestors"><a title="FOFTableNested" href="../classes/FOFTableNested/getAncestors.xhtml">getAncestors()</a>
                — Get all ancestors to this node but not the node itself. In other words it gets the path to the node, without the node itself.</li>
            <li id="getAncestorsAndSelf"><a title="FOFTableNested" href="../classes/FOFTableNested/getAncestorsAndSelf.xhtml">getAncestorsAndSelf()</a>
                — Get all ancestors to this node and the node itself. In other words it gets the full path to the node and the node itself.</li>
            <li id="getAncestorsAndSelfWithoutRoot"><a title="FOFTableNested" href="../classes/FOFTableNested/getAncestorsAndSelfWithoutRoot.xhtml">getAncestorsAndSelfWithoutRoot()</a>
                — Get all ancestors to this node and the node itself, but not the root node. If you want to</li>
            <li id="getAncestorsWithoutRoot"><a title="FOFTableNested" href="../classes/FOFTableNested/getAncestorsWithoutRoot.xhtml">getAncestorsWithoutRoot()</a>
                — Get all ancestors to this node but not the node itself and its root.</li>
            <li id="getDescendants"><a title="FOFTableNested" href="../classes/FOFTableNested/getDescendants.xhtml">getDescendants()</a>
                — Get only our descendant (children) nodes, not ourselves.</li>
            <li id="getDescendantsAndSelf"><a title="FOFTableNested" href="../classes/FOFTableNested/getDescendantsAndSelf.xhtml">getDescendantsAndSelf()</a>
                — Get all descendant (children) nodes and ourselves.</li>
            <li id="getImmediateDescendants"><a title="FOFTableNested" href="../classes/FOFTableNested/getImmediateDescendants.xhtml">getImmediateDescendants()</a>
                — Get the immediate descendants (children). Unlike getDescendants it only goes one level deep into the tree structure. Descendants of descendant nodes will not be returned.</li>
            <li id="getLeaves"><a title="FOFTableNested" href="../classes/FOFTableNested/getLeaves.xhtml">getLeaves()</a>
                — Get all leaf nodes in the tree. You may want to use the scopes to narrow down the search in a specific subtree or path.</li>
            <li id="getLevel"><a title="FOFTableNested" href="../classes/FOFTableNested/getLevel.xhtml">getLevel()</a>
                — Gets the level (depth) of this node in the tree. The result is cached in $this-&gt;treeDepth for faster retrieval.</li>
            <li id="getNestedList"><a title="FOFTableNested" href="../classes/FOFTableNested/getNestedList.xhtml">getNestedList()</a>
                — Returns a hashed array where each element's key is the value of the $key column (default: the ID column of the table) and its value is the value of the $column column (default: title). Each nesting level will have the value of the $column column prefixed by a number of $separator strings, as many as its nesting level (depth).</li>
            <li id="getParent"><a title="FOFTableNested" href="../classes/FOFTableNested/getParent.xhtml">getParent()</a>
                — Returns the immediate parent of the current node</li>
            <li id="getRoot"><a title="FOFTableNested" href="../classes/FOFTableNested/getRoot.xhtml">getRoot()</a>
                — Returns the root node of the tree this node belongs to</li>
            <li id="getSiblings"><a title="FOFTableNested" href="../classes/FOFTableNested/getSiblings.xhtml">getSiblings()</a>
                — Get all sibling nodes, except ourselves</li>
            <li id="getSiblingsAndSelf"><a title="FOFTableNested" href="../classes/FOFTableNested/getSiblingsAndSelf.xhtml">getSiblingsAndSelf()</a>
                — Get all sibling nodes, including ourselves</li>
            <li id="inSameScope"><a title="FOFTableNested" href="../classes/FOFTableNested/inSameScope.xhtml">inSameScope()</a>
                — Returns true if both this node and $otherNode are root, leaf or child (same tree scope)</li>
            <li id="insertAsChildOf"><a title="FOFTableNested" href="../classes/FOFTableNested/insertAsChildOf.xhtml">insertAsChildOf()</a>
                — Alias for insertAsLastchildOf</li>
            <li id="insertAsFirstChildOf"><a title="FOFTableNested" href="../classes/FOFTableNested/insertAsFirstChildOf.xhtml">insertAsFirstChildOf()</a>
                — Insert the current node as the first (leftmost) child of a parent node.</li>
            <li id="insertAsLastChildOf"><a title="FOFTableNested" href="../classes/FOFTableNested/insertAsLastChildOf.xhtml">insertAsLastChildOf()</a>
                — Insert the current node as the last (rightmost) child of a parent node.</li>
            <li id="insertAsRoot"><a title="FOFTableNested" href="../classes/FOFTableNested/insertAsRoot.xhtml">insertAsRoot()</a>
                — Insert the current node as a tree root. It is a good idea to never use this method, instead providing a root node in your schema installation and then sticking to only one root.</li>
            <li id="insertAsSiblingOf"><a title="FOFTableNested" href="../classes/FOFTableNested/insertAsSiblingOf.xhtml">insertAsSiblingOf()</a>
                — Alias for insertRightOf</li>
            <li id="insertLeftOf"><a title="FOFTableNested" href="../classes/FOFTableNested/insertLeftOf.xhtml">insertLeftOf()</a>
                — Insert the current node to the left of (before) a sibling node</li>
            <li id="insertRightOf"><a title="FOFTableNested" href="../classes/FOFTableNested/insertRightOf.xhtml">insertRightOf()</a>
                — Insert the current node to the right of (after) a sibling node</li>
            <li id="insideSubtree"><a title="FOFTableNested" href="../classes/FOFTableNested/insideSubtree.xhtml">insideSubtree()</a>
                — Alias for isDescendantOf</li>
            <li id="isAncestorOf"><a title="FOFTableNested" href="../classes/FOFTableNested/isAncestorOf.xhtml">isAncestorOf()</a>
                — Returns true if we are an ancestor of $otherNode</li>
            <li id="isChild"><a title="FOFTableNested" href="../classes/FOFTableNested/isChild.xhtml">isChild()</a>
                — Is this a child node (not root)?</li>
            <li id="isDescendantOf"><a title="FOFTableNested" href="../classes/FOFTableNested/isDescendantOf.xhtml">isDescendantOf()</a>
                — Returns true if we are a descendant of $otherNode</li>
            <li id="isLeaf"><a title="FOFTableNested" href="../classes/FOFTableNested/isLeaf.xhtml">isLeaf()</a>
                — Is this a leaf node (a node without children)?</li>
            <li id="isRoot"><a title="FOFTableNested" href="../classes/FOFTableNested/isRoot.xhtml">isRoot()</a>
                — Is this a top-level root node?</li>
            <li id="isSelfOrAncestorOf"><a title="FOFTableNested" href="../classes/FOFTableNested/isSelfOrAncestorOf.xhtml">isSelfOrAncestorOf()</a>
                — Returns true if $otherNode is ourselves or we are an ancestor of $otherNode</li>
            <li id="isSelfOrDescendantOf"><a title="FOFTableNested" href="../classes/FOFTableNested/isSelfOrDescendantOf.xhtml">isSelfOrDescendantOf()</a>
                — Returns true if $otherNode is ourselves or if we are a descendant of $otherNode</li>
            <li id="isValid">
              <a title="FOFTableNested" href="../classes/FOFTableNested/isValid.xhtml">isValid()</a>
            </li>
            <li id="makeChildOf"><a title="FOFTableNested" href="../classes/FOFTableNested/makeChildOf.xhtml">makeChildOf()</a>
                — Alias for makeLastChildOf</li>
            <li id="makeFirstChildOf"><a title="FOFTableNested" href="../classes/FOFTableNested/makeFirstChildOf.xhtml">makeFirstChildOf()</a>
                — Moves a node and its subtree as a the first (leftmost) child of $parentNode</li>
            <li id="makeLastChildOf"><a title="FOFTableNested" href="../classes/FOFTableNested/makeLastChildOf.xhtml">makeLastChildOf()</a>
                — Moves a node and its subtree as a the last (rightmost) child of $parentNode</li>
            <li id="makeNextSiblingOf"><a title="FOFTableNested" href="../classes/FOFTableNested/makeNextSiblingOf.xhtml">makeNextSiblingOf()</a>
                — Alias for moveToRightOf</li>
            <li id="makePreviousSiblingOf"><a title="FOFTableNested" href="../classes/FOFTableNested/makePreviousSiblingOf.xhtml">makePreviousSiblingOf()</a>
                — Alias for moveToLeftOf</li>
            <li id="makeRoot"><a title="FOFTableNested" href="../classes/FOFTableNested/makeRoot.xhtml">makeRoot()</a>
                — Makes the current node a root (and moving its entire subtree along the way). This is achieved by moving the node to the right of its root node</li>
            <li id="makeSiblingOf"><a title="FOFTableNested" href="../classes/FOFTableNested/makeSiblingOf.xhtml">makeSiblingOf()</a>
                — Alias for makeNextSiblingOf</li>
            <li id="move"><a title="FOFTableNested" href="../classes/FOFTableNested/move.xhtml">move()</a>
                — Not supported in nested sets</li>
            <li id="moveLeft"><a title="FOFTableNested" href="../classes/FOFTableNested/moveLeft.xhtml">moveLeft()</a>
                — Move the current node (and its subtree) one position to the left in the tree, i.e. before its left-hand sibling</li>
            <li id="moveRight"><a title="FOFTableNested" href="../classes/FOFTableNested/moveRight.xhtml">moveRight()</a>
                — Move the current node (and its subtree) one position to the right in the tree, i.e. after its right-hand sibling</li>
            <li id="moveToLeftOf"><a title="FOFTableNested" href="../classes/FOFTableNested/moveToLeftOf.xhtml">moveToLeftOf()</a>
                — Moves the current node (and its subtree) to the left of another node. The other node can be in a different position in the tree or even under a different root.</li>
            <li id="moveToRightOf"><a title="FOFTableNested" href="../classes/FOFTableNested/moveToRightOf.xhtml">moveToRightOf()</a>
                — Moves the current node (and its subtree) to the right of another node. The other node can be in a different position in the tree or even under a different root.</li>
            <li id="rebuild">
              <a title="FOFTableNested" href="../classes/FOFTableNested/rebuild.xhtml">rebuild()</a>
            </li>
            <li id="reorder"><a title="FOFTableNested" href="../classes/FOFTableNested/reorder.xhtml">reorder()</a>
                — Not supported in nested sets</li>
            <li id="reset"><a title="FOFTableNested" href="../classes/FOFTableNested/reset.xhtml">reset()</a>
                — Method to reset class properties to the defaults set in the class definition. It will ignore the primary key as well as any private class properties.</li>
            <li id="whereRaw"><a title="FOFTableNested" href="../classes/FOFTableNested/whereRaw.xhtml">whereRaw()</a>
                — Add custom, pre-compiled WHERE clauses for use in buildQuery. The raw WHERE clause you specify is added as is to the query generated by buildQuery. You are responsible for quoting and escaping the field names and data found inside the WHERE clause.</li>
            <li id="withoutNode"><a title="FOFTableNested" href="../classes/FOFTableNested/withoutNode.xhtml">withoutNode()</a>
                — get() will not return the selected node if it's part of the query results</li>
          </ul>
        </div>
      </section>
    </div>
    <footer>
      <span>Generated using phpDox 0.8.0 - Copyright (C) 2010 - 2016 by Arne Blankerts</span>
    </footer>
  </body>
</html>
