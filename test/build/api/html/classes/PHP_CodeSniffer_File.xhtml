<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html SYSTEM "about:legacy-compat">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
  <head>
    <title>phpDox - PHP_CodeSniffer_File</title>
    <link rel="stylesheet" type="text/css" href="../css/style.css" media="screen"/>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
  </head>
  <body>
    <nav class="topnav">
      <ul>
        <li>
          <div class="logo"><span>/**</span>phpDox</div>
        </li>
        <li class="separator">
          <a href="../index.xhtml">Overview</a>
        </li>
        <li class="separator">
          <a href="../namespaces.xhtml">Namespaces</a>
        </li>
        <li>
          <a href="../interfaces.xhtml">Interfaces</a>
        </li>
        <li>
          <a href="../classes.xhtml">Classes</a>
        </li>
        <li>
          <a href="../traits.xhtml">Traits</a>
        </li>
        <li class="separator">
          <a href="../source/index.xhtml">Source</a>
        </li>
      </ul>
    </nav>
    <div id="mainstage">
      <div class="box">
        <ul class="breadcrumb">
          <li>
            <a href="../index.xhtml">Overview</a>
          </li>
          <li class="separator">
            <a href="../classes.xhtml">Classes</a>
          </li>
          <li class="separator">PHP_CodeSniffer_File</li>
        </ul>
      </div>
      <nav class="box">
        <ul>
          <li>
            <a href="#introduction">Introduction</a>
          </li>
          <li>
            <a href="#synopsis">Synopsis</a>
          </li>
          <li>
            <a href="#members">Members</a>
          </li>
          <li>
            <a href="#methods">Methods</a>
          </li>
          <li>
            <a href="../source/vendor/squizlabs/php_codesniffer/CodeSniffer/File.php.xhtml#line117">Source</a>
          </li>
        </ul>
      </nav>
      <section>
        <h1 id="introduction"><small>\</small>PHP_CodeSniffer_File</h1>
        <h4>A PHP_CodeSniffer_File object represents a PHP source file and the tokens associated with it.</h4>
        <p>It provides a means for traversing the token stack, along with<br/>other token related operations. If a PHP_CodeSniffer_Sniff finds and error or<br/>warning within a PHP_CodeSniffer_File, you can raise an error using the<br/>addError() or addWarning() methods.<br/><br/>&lt;b&gt;Token Information&lt;/b&gt;<br/><br/>Each token within the stack contains information about itself:<br/><br/>&lt;code&gt;<br/>array(<br/>'code' =&gt; 301, // the token type code (see token_get_all())<br/>'content' =&gt; 'if', // the token content<br/>'type' =&gt; 'T_IF', // the token name<br/>'line' =&gt; 56, // the line number when the token is located<br/>'column' =&gt; 12, // the column in the line where this token<br/>// starts (starts from 1)<br/>'level' =&gt; 2 // the depth a token is within the scopes open<br/>'conditions' =&gt; array( // a list of scope condition token<br/>// positions =&gt; codes that<br/>2 =&gt; 50, // opened the scopes that this token exists<br/>9 =&gt; 353, // in (see conditional tokens section below)<br/>),<br/>);<br/>&lt;/code&gt;<br/><br/>&lt;b&gt;Conditional Tokens&lt;/b&gt;<br/><br/>In addition to the standard token fields, conditions contain information to<br/>determine where their scope begins and ends:<br/><br/>&lt;code&gt;<br/>array(<br/>'scope_condition' =&gt; 38, // the token position of the condition<br/>'scope_opener' =&gt; 41, // the token position that started the scope<br/>'scope_closer' =&gt; 70, // the token position that ended the scope<br/>);<br/>&lt;/code&gt;<br/><br/>The condition, the scope opener and the scope closer each contain this<br/>information.<br/><br/>&lt;b&gt;Parenthesis Tokens&lt;/b&gt;<br/><br/>Each parenthesis token (T_OPEN_PARENTHESIS and T_CLOSE_PARENTHESIS) has a<br/>reference to their opening and closing parenthesis, one being itself, the<br/>other being its opposite.<br/><br/>&lt;code&gt;<br/>array(<br/>'parenthesis_opener' =&gt; 34,<br/>'parenthesis_closer' =&gt; 40,<br/>);<br/>&lt;/code&gt;<br/><br/>Some tokens can "own" a set of parenthesis. For example a T_FUNCTION token<br/>has parenthesis around its argument list. These tokens also have the<br/>parenthesis_opener and and parenthesis_closer indices. Not all parenthesis<br/>have owners, for example parenthesis used for arithmetic operations and<br/>function calls. The parenthesis tokens that have an owner have the following<br/>auxiliary array indices.<br/><br/>&lt;code&gt;<br/>array(<br/>'parenthesis_opener' =&gt; 34,<br/>'parenthesis_closer' =&gt; 40,<br/>'parenthesis_owner' =&gt; 33,<br/>);<br/>&lt;/code&gt;<br/><br/>Each token within a set of parenthesis also has an array index<br/>'nested_parenthesis' which is an array of the<br/>left parenthesis =&gt; right parenthesis token positions.<br/><br/>&lt;code&gt;<br/>'nested_parenthesis' =&gt; array(<br/>12 =&gt; 15<br/>11 =&gt; 14<br/>);<br/>&lt;/code&gt;<br/><br/>&lt;b&gt;Extended Tokens&lt;/b&gt;<br/><br/>PHP_CodeSniffer extends and augments some of the tokens created by<br/>&lt;i&gt;token_get_all()&lt;/i&gt;. A full list of these tokens can be seen in the<br/>&lt;i&gt;Tokens.php&lt;/i&gt; file.</p>
        <ul>
          <li>Author: Greg Sherwood &lt;gsherwood@squiz.net&gt;</li>
          <li>Copyright: 2006-2014 Squiz Pty Ltd (ABN 77 084 670 600)</li>
          <li>License: https://github.com/squizlabs/PHP_CodeSniffer/blob/master/licence.txt BSD Licence</li>
        </ul>
        <h2 id="synopsis">Synopsis</h2>
        <div class="synopsis">class PHP_CodeSniffer_File
            {<br/><ul class="none"><li>// members</li><li>private string <a href="#members">$_file</a> =
                        '';
                    </li><li>public string <a href="#members">$eolChar</a> =
                        '';
                    </li><li>public <span title="PHP_CodeSniffer">PHP_CodeSniffer</span> <a href="#members">$phpcs</a> =
                        null;
                    </li><li>public <span title="PHP_CodeSniffer_Fixer">PHP_CodeSniffer_Fixer</span> <a href="#members">$fixer</a> =
                        null;
                    </li><li>public <span title=""/> <a href="#members">$tokenizer</a> =
                        null;
                    </li><li>public string <a href="#members">$tokenizerType</a> =
                        'PHP';
                    </li><li>public integer <a href="#members">$numTokens</a> =
                        0;
                    </li><li>private <span title="array()">array()</span> <a href="#members">$_tokens</a> =
                        ;
                    </li><li>private <span title="array()">array()</span> <a href="#members">$_errors</a> =
                        ;
                    </li><li>private <span title="array()">array()</span> <a href="#members">$_warnings</a> =
                        ;
                    </li><li>private <span title="array()">array()</span> <a href="#members">$_metrics</a> =
                        ;
                    </li><li>private <span title="bool">bool</span> <a href="#members">$_recordErrors</a> =
                        true;
                    </li><li>private static <span title="array()">array()</span> <a href="#members">$_ignoredLines</a> =
                        ;
                    </li><li>private <span title="array()">array()</span> <a href="#members">$_ignoredListeners</a> =
                        ;
                    </li><li>private <span title="array()">array()</span> <a href="#members">$_ignoredCodes</a> =
                        ;
                    </li><li>private integer <a href="#members">$_errorCount</a> =
                        0;
                    </li><li>private integer <a href="#members">$_warningCount</a> =
                        0;
                    </li><li>private integer <a href="#members">$_fixableCount</a> =
                        0;
                    </li><li>private <span title="array(PHP_CodeSniffer_Sniff)">array(PHP_CodeSniffer_Sniff)</span> <a href="#members">$_listeners</a> =
                        ;
                    </li><li>private string <a href="#members">$_activeListener</a> =
                        '';
                    </li><li>private <span title="array()">array()</span> <a href="#members">$_listenerTimes</a> =
                        ;
                    </li><li>protected array <a href="#members">$ruleset</a> =
                        ;
                    </li></ul><ul class="none"><li>// methods</li><li>public void <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/__construct.xhtml">__construct</a>()
                    </li><li>public void <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/setActiveListener.xhtml">setActiveListener</a>()
                    </li><li>public void <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/addTokenListener.xhtml">addTokenListener</a>()
                    </li><li>public void <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/removeTokenListener.xhtml">removeTokenListener</a>()
                    </li><li>public void <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/refreshTokenListeners.xhtml">refreshTokenListeners</a>()
                    </li><li>public array <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getTokens.xhtml">getTokens</a>()
                    </li><li>public void <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/start.xhtml">start</a>()
                    </li><li>public void <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/cleanUp.xhtml">cleanUp</a>()
                    </li><li>private void <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/_parse.xhtml">_parse</a>()
                    </li><li>public static string <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/detectLineEndings.xhtml">detectLineEndings</a>()
                    </li><li>public boolean <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/addError.xhtml">addError</a>()
                    </li><li>public boolean <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/addWarning.xhtml">addWarning</a>()
                    </li><li>public boolean <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/addErrorOnLine.xhtml">addErrorOnLine</a>()
                    </li><li>public boolean <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/addWarningOnLine.xhtml">addWarningOnLine</a>()
                    </li><li>public boolean <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/addFixableError.xhtml">addFixableError</a>()
                    </li><li>public boolean <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/addFixableWarning.xhtml">addFixableWarning</a>()
                    </li><li>private boolean <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/_addError.xhtml">_addError</a>()
                    </li><li>private boolean <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/_addWarning.xhtml">_addWarning</a>()
                    </li><li>public boolean <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/recordMetric.xhtml">recordMetric</a>()
                    </li><li>public int <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getErrorCount.xhtml">getErrorCount</a>()
                    </li><li>public int <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getWarningCount.xhtml">getWarningCount</a>()
                    </li><li>public int <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getSuccessCount.xhtml">getSuccessCount</a>()
                    </li><li>public int <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getFixableCount.xhtml">getFixableCount</a>()
                    </li><li>public array <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getIgnoredLines.xhtml">getIgnoredLines</a>()
                    </li><li>public array <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getErrors.xhtml">getErrors</a>()
                    </li><li>public array <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getWarnings.xhtml">getWarnings</a>()
                    </li><li>public array <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getMetrics.xhtml">getMetrics</a>()
                    </li><li>public string <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getFilename.xhtml">getFilename</a>()
                    </li><li>public static array <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/tokenizeString.xhtml">tokenizeString</a>()
                    </li><li>private static void <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/_createPositionMap.xhtml">_createPositionMap</a>()
                    </li><li>private static void <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/_createTokenMap.xhtml">_createTokenMap</a>()
                    </li><li>private static void <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/_createParenthesisNestingMap.xhtml">_createParenthesisNestingMap</a>()
                    </li><li>private static void <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/_createScopeMap.xhtml">_createScopeMap</a>()
                    </li><li>private static int <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/_recurseScopeMap.xhtml">_recurseScopeMap</a>()
                    </li><li>private static void <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/_createLevelMap.xhtml">_createLevelMap</a>()
                    </li><li>public string|null <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getDeclarationName.xhtml">getDeclarationName</a>()
                    </li><li>public boolean <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/isAnonymousFunction.xhtml">isAnonymousFunction</a>()
                    </li><li>public array <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getMethodParameters.xhtml">getMethodParameters</a>()
                    </li><li>public array <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getMethodProperties.xhtml">getMethodProperties</a>()
                    </li><li>public array <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getMemberProperties.xhtml">getMemberProperties</a>()
                    </li><li>public array <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getClassProperties.xhtml">getClassProperties</a>()
                    </li><li>public boolean <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/isReference.xhtml">isReference</a>()
                    </li><li>public string <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getTokensAsString.xhtml">getTokensAsString</a>()
                    </li><li>public int|bool <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/findPrevious.xhtml">findPrevious</a>()
                    </li><li>public int|bool <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/findNext.xhtml">findNext</a>()
                    </li><li>public int <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/findStartOfStatement.xhtml">findStartOfStatement</a>()
                    </li><li>public int <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/findEndOfStatement.xhtml">findEndOfStatement</a>()
                    </li><li>public int <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/findFirstOnLine.xhtml">findFirstOnLine</a>()
                    </li><li>public boolean <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/hasCondition.xhtml">hasCondition</a>()
                    </li><li>public int <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getCondition.xhtml">getCondition</a>()
                    </li><li>public string <a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/findExtendedClassName.xhtml">findExtendedClassName</a>()
                    </li></ul>

            }<br/></div>
        <h2 id="members">Members</h2>
        <div class="styled members">
          <h4>private</h4>
          <ul class="members">
            <li id="_activeListener"><strong>$_activeListener</strong>
                —
                string<br/><span class="indent">The class name of the sniff currently processing the file.</span></li>
            <li id="_errorCount"><strong>$_errorCount</strong>
                —
                int<br/><span class="indent">The total number of errors raised.</span></li>
            <li id="_errors"><strong>$_errors</strong>
                —
                <a title="array()" href="../classes/array().xhtml">array()</a><br/><span class="indent">The errors raised from PHP_CodeSniffer_Sniffs.</span></li>
            <li id="_file"><strong>$_file</strong>
                —
                string<br/><span class="indent">The absolute path to the file associated with this object.</span></li>
            <li id="_fixableCount"><strong>$_fixableCount</strong>
                —
                int<br/><span class="indent">The total number of errors/warnings that can be fixed.</span></li>
            <li id="_ignoredCodes"><strong>$_ignoredCodes</strong>
                —
                <a title="array()" href="../classes/array().xhtml">array()</a><br/><span class="indent">An array of message codes that are being ignored.</span></li>
            <li id="_ignoredLines"><strong>$_ignoredLines</strong>
                —
                <a title="array()" href="../classes/array().xhtml">array()</a><br/><span class="indent">An array of lines that are being ignored.</span></li>
            <li id="_ignoredListeners"><strong>$_ignoredListeners</strong>
                —
                <a title="array()" href="../classes/array().xhtml">array()</a><br/><span class="indent">An array of sniffs that are being ignored.</span></li>
            <li id="_listenerTimes"><strong>$_listenerTimes</strong>
                —
                <a title="array()" href="../classes/array().xhtml">array()</a><br/><span class="indent">An array of sniffs being processed and how long they took.</span></li>
            <li id="_listeners"><strong>$_listeners</strong>
                —
                <a title="array(PHP_CodeSniffer_Sniff)" href="../classes/array(PHP_CodeSniffer_Sniff).xhtml">array(PHP_CodeSniffer_Sniff)</a><br/><span class="indent">An array of sniffs listening to this file's processing.</span></li>
            <li id="_metrics"><strong>$_metrics</strong>
                —
                <a title="array()" href="../classes/array().xhtml">array()</a><br/><span class="indent">The metrics recorded from PHP_CodeSniffer_Sniffs.</span></li>
            <li id="_recordErrors"><strong>$_recordErrors</strong>
                —
                <a title="bool" href="../classes/bool.xhtml">bool</a><br/><span class="indent">Record the errors and warnings raised.</span></li>
            <li id="_tokens"><strong>$_tokens</strong>
                —
                <a title="array()" href="../classes/array().xhtml">array()</a><br/><span class="indent">The tokens stack map.</span></li>
            <li id="_warningCount"><strong>$_warningCount</strong>
                —
                int<br/><span class="indent">The total number of warnings raised.</span></li>
            <li id="_warnings"><strong>$_warnings</strong>
                —
                <a title="array()" href="../classes/array().xhtml">array()</a><br/><span class="indent">The warnings raised from PHP_CodeSniffer_Sniffs.</span></li>
          </ul>
          <h4>protected</h4>
          <ul class="members">
            <li id="ruleset"><strong>$ruleset</strong>
                —
                array<br/><span class="indent">An array of rules from the ruleset.xml file.</span></li>
          </ul>
          <h4>public</h4>
          <ul class="members">
            <li id="eolChar"><strong>$eolChar</strong>
                —
                string<br/><span class="indent">The EOL character this file uses.</span></li>
            <li id="fixer"><strong>$fixer</strong>
                —
                <a title="PHP_CodeSniffer_Fixer" href="../classes/PHP_CodeSniffer_Fixer.xhtml">PHP_CodeSniffer_Fixer</a><br/><span class="indent">The Fixer object to control fixing errors.</span></li>
            <li id="numTokens"><strong>$numTokens</strong>
                —
                int<br/><span class="indent">The number of tokens in this file.</span></li>
            <li id="phpcs"><strong>$phpcs</strong>
                —
                <a title="PHP_CodeSniffer" href="../classes/PHP_CodeSniffer.xhtml">PHP_CodeSniffer</a><br/><span class="indent">The PHP_CodeSniffer object controlling this run.</span></li>
            <li id="tokenizer"><strong>$tokenizer</strong>
                —
                <a title="" href="../classes/.xhtml"/><br/><span class="indent">The tokenizer being used for this file.</span></li>
            <li id="tokenizerType"><strong>$tokenizerType</strong>
                —
                string<br/><span class="indent">The tokenizer being used for this file.</span></li>
          </ul>
        </div>
        <h2 id="methods">Methods</h2>
        <div class="styled">
          <h4>private</h4>
          <ul>
            <li id="_addError"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/_addError.xhtml">_addError()</a>
                — Adds an error to the error stack.</li>
            <li id="_addWarning"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/_addWarning.xhtml">_addWarning()</a>
                — Adds an warning to the warning stack.</li>
            <li id="_createLevelMap"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/_createLevelMap.xhtml">_createLevelMap()</a>
                — Constructs the level map.</li>
            <li id="_createParenthesisNestingMap"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/_createParenthesisNestingMap.xhtml">_createParenthesisNestingMap()</a>
                — Creates a map for the parenthesis tokens that surround other tokens.</li>
            <li id="_createPositionMap"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/_createPositionMap.xhtml">_createPositionMap()</a>
                — Sets token position information.</li>
            <li id="_createScopeMap"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/_createScopeMap.xhtml">_createScopeMap()</a>
                — Creates a scope map of tokens that open scopes.</li>
            <li id="_createTokenMap"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/_createTokenMap.xhtml">_createTokenMap()</a>
                — Creates a map of brackets positions.</li>
            <li id="_parse"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/_parse.xhtml">_parse()</a>
                — Tokenizes the file and prepares it for the test run.</li>
            <li id="_recurseScopeMap"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/_recurseScopeMap.xhtml">_recurseScopeMap()</a>
                — Recurses though the scope openers to build a scope map.</li>
          </ul>
          <h4>public</h4>
          <ul>
            <li id="__construct"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/__construct.xhtml">__construct()</a>
                — Constructs a PHP_CodeSniffer_File.</li>
            <li id="addError"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/addError.xhtml">addError()</a>
                — Records an error against a specific token in the file.</li>
            <li id="addErrorOnLine"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/addErrorOnLine.xhtml">addErrorOnLine()</a>
                — Records an error against a specific line in the file.</li>
            <li id="addFixableError"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/addFixableError.xhtml">addFixableError()</a>
                — Records a fixable error against a specific token in the file.</li>
            <li id="addFixableWarning"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/addFixableWarning.xhtml">addFixableWarning()</a>
                — Records a fixable warning against a specific token in the file.</li>
            <li id="addTokenListener"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/addTokenListener.xhtml">addTokenListener()</a>
                — Adds a listener to the token stack that listens to the specific tokens.</li>
            <li id="addWarning"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/addWarning.xhtml">addWarning()</a>
                — Records a warning against a specific token in the file.</li>
            <li id="addWarningOnLine"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/addWarningOnLine.xhtml">addWarningOnLine()</a>
                — Records a warning against a specific token in the file.</li>
            <li id="cleanUp"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/cleanUp.xhtml">cleanUp()</a>
                — Remove vars stored in this file that are no longer required.</li>
            <li id="detectLineEndings"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/detectLineEndings.xhtml">detectLineEndings()</a>
                — Opens a file and detects the EOL character being used.</li>
            <li id="findEndOfStatement"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/findEndOfStatement.xhtml">findEndOfStatement()</a>
                — Returns the position of the last non-whitespace token in a statement.</li>
            <li id="findExtendedClassName"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/findExtendedClassName.xhtml">findExtendedClassName()</a>
                — Returns the name of the class that the specified class extends.</li>
            <li id="findFirstOnLine"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/findFirstOnLine.xhtml">findFirstOnLine()</a>
                — Returns the position of the first token on a line, matching given type.</li>
            <li id="findNext"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/findNext.xhtml">findNext()</a>
                — Returns the position of the next specified token(s).</li>
            <li id="findPrevious"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/findPrevious.xhtml">findPrevious()</a>
                — Returns the position of the previous specified token(s).</li>
            <li id="findStartOfStatement"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/findStartOfStatement.xhtml">findStartOfStatement()</a>
                — Returns the position of the first non-whitespace token in a statement.</li>
            <li id="getClassProperties"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getClassProperties.xhtml">getClassProperties()</a>
                — Returns the visibility and implementation properties of a class.</li>
            <li id="getCondition"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getCondition.xhtml">getCondition()</a>
                — Return the position of the condition for the passed token.</li>
            <li id="getDeclarationName"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getDeclarationName.xhtml">getDeclarationName()</a>
                — Returns the declaration names for T_CLASS, T_INTERFACE and T_FUNCTION tokens.</li>
            <li id="getErrorCount"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getErrorCount.xhtml">getErrorCount()</a>
                — Returns the number of errors raised.</li>
            <li id="getErrors"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getErrors.xhtml">getErrors()</a>
                — Returns the errors raised from processing this file.</li>
            <li id="getFilename"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getFilename.xhtml">getFilename()</a>
                — Returns the absolute filename of this file.</li>
            <li id="getFixableCount"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getFixableCount.xhtml">getFixableCount()</a>
                — Returns the number of fixable errors/warnings raised.</li>
            <li id="getIgnoredLines"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getIgnoredLines.xhtml">getIgnoredLines()</a>
                — Returns the list of ignored lines.</li>
            <li id="getMemberProperties"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getMemberProperties.xhtml">getMemberProperties()</a>
                — Returns the visibility and implementation properties of the class member variable found at the specified position in the stack.</li>
            <li id="getMethodParameters"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getMethodParameters.xhtml">getMethodParameters()</a>
                — Returns the method parameters for the specified T_FUNCTION token.</li>
            <li id="getMethodProperties"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getMethodProperties.xhtml">getMethodProperties()</a>
                — Returns the visibility and implementation properties of a method.</li>
            <li id="getMetrics"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getMetrics.xhtml">getMetrics()</a>
                — Returns the metrics found while processing this file.</li>
            <li id="getSuccessCount"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getSuccessCount.xhtml">getSuccessCount()</a>
                — Returns the number of successes recorded.</li>
            <li id="getTokens"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getTokens.xhtml">getTokens()</a>
                — Returns the token stack for this file.</li>
            <li id="getTokensAsString"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getTokensAsString.xhtml">getTokensAsString()</a>
                — Returns the content of the tokens from the specified start position in the token stack for the specified length.</li>
            <li id="getWarningCount"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getWarningCount.xhtml">getWarningCount()</a>
                — Returns the number of warnings raised.</li>
            <li id="getWarnings"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/getWarnings.xhtml">getWarnings()</a>
                — Returns the warnings raised from processing this file.</li>
            <li id="hasCondition"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/hasCondition.xhtml">hasCondition()</a>
                — Determine if the passed token has a condition of one of the passed types.</li>
            <li id="isAnonymousFunction"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/isAnonymousFunction.xhtml">isAnonymousFunction()</a>
                — Check if the token at the specified position is a anonymous function.</li>
            <li id="isReference"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/isReference.xhtml">isReference()</a>
                — Determine if the passed token is a reference operator.</li>
            <li id="recordMetric"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/recordMetric.xhtml">recordMetric()</a>
                — Adds an warning to the warning stack.</li>
            <li id="refreshTokenListeners"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/refreshTokenListeners.xhtml">refreshTokenListeners()</a>
                — Rebuilds the list of listeners to ensure their state is cleared.</li>
            <li id="removeTokenListener"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/removeTokenListener.xhtml">removeTokenListener()</a>
                — Removes a listener from listening from the specified tokens.</li>
            <li id="setActiveListener"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/setActiveListener.xhtml">setActiveListener()</a>
                — Sets the name of the currently active sniff.</li>
            <li id="start"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/start.xhtml">start()</a>
                — Starts the stack traversal and tells listeners when tokens are found.</li>
            <li id="tokenizeString"><a title="PHP_CodeSniffer_File" href="../classes/PHP_CodeSniffer_File/tokenizeString.xhtml">tokenizeString()</a>
                — Creates an array of tokens when given some PHP code.</li>
          </ul>
        </div>
      </section>
    </div>
    <footer>
      <span>Generated using phpDox 0.8.0 - Copyright (C) 2010 - 2016 by Arne Blankerts</span>
    </footer>
  </body>
</html>
