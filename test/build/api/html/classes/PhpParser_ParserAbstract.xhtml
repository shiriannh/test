<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html SYSTEM "about:legacy-compat">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
  <head>
    <title>phpDox - PhpParser\ParserAbstract</title>
    <link rel="stylesheet" type="text/css" href="../css/style.css" media="screen"/>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
  </head>
  <body>
    <nav class="topnav">
      <ul>
        <li>
          <div class="logo"><span>/**</span>phpDox</div>
        </li>
        <li class="separator">
          <a href="../index.xhtml">Overview</a>
        </li>
        <li class="separator">
          <a href="../namespaces.xhtml">Namespaces</a>
        </li>
        <li>
          <a href="../interfaces.xhtml">Interfaces</a>
        </li>
        <li>
          <a href="../classes.xhtml">Classes</a>
        </li>
        <li>
          <a href="../traits.xhtml">Traits</a>
        </li>
        <li class="separator">
          <a href="../source/index.xhtml">Source</a>
        </li>
      </ul>
    </nav>
    <div id="mainstage">
      <div class="box">
        <ul class="breadcrumb">
          <li>
            <a href="../index.xhtml">Overview</a>
          </li>
          <li class="separator">
            <a href="../classes.xhtml">Classes</a>
          </li>
          <li class="separator">
            <a href="../classes.xhtml#PhpParser">PhpParser</a>
          </li>
          <li class="separator">ParserAbstract</li>
        </ul>
      </div>
      <nav class="box">
        <ul>
          <li>
            <a href="#introduction">Introduction</a>
          </li>
          <li>
            <a href="#synopsis">Synopsis</a>
          </li>
          <li>
            <a href="#hierarchy">Hierarchy</a>
          </li>
          <li>
            <a href="#constants">Constants</a>
          </li>
          <li>
            <a href="#members">Members</a>
          </li>
          <li>
            <a href="#methods">Methods</a>
          </li>
          <li>
            <a href="../source/vendor/nikic/php-parser/lib/PhpParser/ParserAbstract.php.xhtml#line11">Source</a>
          </li>
        </ul>
      </nav>
      <section>
        <h1 id="introduction"><small>PhpParser\</small>ParserAbstract</h1>
        <h4/>
        <p/>
        <h2 id="synopsis">Synopsis</h2>
        <div class="synopsis">class ParserAbstract
                implements
                <a title="PhpParser\Parser" href="../interfaces/PhpParser_Parser.xhtml">Parser</a>
            {<br/><ul class="none"><li>// constants</li><li>const SYMBOL_NONE = 1;</li></ul><ul class="none"><li>// members</li><li>protected  <a href="#members">$tokenToSymbolMapSize</a>;
                    </li><li>protected  <a href="#members">$actionTableSize</a>;
                    </li><li>protected  <a href="#members">$gotoTableSize</a>;
                    </li><li>protected  <a href="#members">$invalidSymbol</a>;
                    </li><li>protected  <a href="#members">$errorSymbol</a>;
                    </li><li>protected  <a href="#members">$defaultAction</a>;
                    </li><li>protected  <a href="#members">$unexpectedTokenRule</a>;
                    </li><li>protected  <a href="#members">$YY2TBLSTATE</a>;
                    </li><li>protected  <a href="#members">$YYNLSTATES</a>;
                    </li><li>protected  <a href="#members">$tokenToSymbol</a>;
                    </li><li>protected  <a href="#members">$symbolToName</a>;
                    </li><li>protected  <a href="#members">$productions</a>;
                    </li><li>protected  <a href="#members">$actionBase</a>;
                    </li><li>protected  <a href="#members">$action</a>;
                    </li><li>protected  <a href="#members">$actionCheck</a>;
                    </li><li>protected  <a href="#members">$actionDefault</a>;
                    </li><li>protected  <a href="#members">$gotoBase</a>;
                    </li><li>protected  <a href="#members">$goto</a>;
                    </li><li>protected  <a href="#members">$gotoCheck</a>;
                    </li><li>protected  <a href="#members">$gotoDefault</a>;
                    </li><li>protected  <a href="#members">$ruleToNonTerminal</a>;
                    </li><li>protected  <a href="#members">$ruleToLength</a>;
                    </li><li>protected  <a href="#members">$lexer</a>;
                    </li><li>protected  <a href="#members">$semValue</a>;
                    </li><li>protected  <a href="#members">$stackPos</a>;
                    </li><li>protected  <a href="#members">$semStack</a>;
                    </li><li>protected  <a href="#members">$startAttributeStack</a>;
                    </li><li>protected  <a href="#members">$endAttributes</a>;
                    </li><li>protected  <a href="#members">$lookaheadStartAttributes</a>;
                    </li><li>protected  <a href="#members">$throwOnError</a>;
                    </li><li>protected  <a href="#members">$errors</a>;
                    </li></ul><ul class="none"><li>// methods</li><li>public void <a title="PhpParser\ParserAbstract" href="../classes/PhpParser_ParserAbstract/__construct.xhtml">__construct</a>()
                    </li><li>public array <a title="PhpParser\ParserAbstract" href="../classes/PhpParser_ParserAbstract/getErrors.xhtml">getErrors</a>()
                    </li><li>public array <a title="PhpParser\ParserAbstract" href="../classes/PhpParser_ParserAbstract/parse.xhtml">parse</a>()
                    </li><li>protected void <a title="PhpParser\ParserAbstract" href="../classes/PhpParser_ParserAbstract/getErrorMessage.xhtml">getErrorMessage</a>()
                    </li><li>protected void <a title="PhpParser\ParserAbstract" href="../classes/PhpParser_ParserAbstract/getExpectedTokens.xhtml">getExpectedTokens</a>()
                    </li><li>protected array <a title="PhpParser\ParserAbstract" href="../classes/PhpParser_ParserAbstract/handleNamespaces.xhtml">handleNamespaces</a>()
                    </li><li>private void <a title="PhpParser\ParserAbstract" href="../classes/PhpParser_ParserAbstract/getNamespacingStyle.xhtml">getNamespacingStyle</a>()
                    </li><li>protected void <a title="PhpParser\ParserAbstract" href="../classes/PhpParser_ParserAbstract/handleScalarTypes.xhtml">handleScalarTypes</a>()
                    </li></ul>

            }<br/></div>
        <h2 id="hierarchy">Hierarchy</h2>
        <div class="styled">
          <h4>Implements</h4>
          <ul>
            <li>
              <a title="PhpParser\Parser" href="../interfaces/PhpParser_Parser.xhtml">PhpParser\Parser</a>
            </li>
          </ul>
        </div>
        <h2 id="constants">Constants</h2>
        <table class="styled">
          <thead>
            <tr>
              <th>Name</th>
              <th>Value</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td id="SYMBOL_NONE">SYMBOL_NONE</td>
              <td>1</td>
            </tr>
          </tbody>
        </table>
        <h2 id="members">Members</h2>
        <div class="styled members">
          <h4>protected</h4>
          <ul class="members">
            <li id="YY2TBLSTATE">
              <strong>$YY2TBLSTATE</strong>
            </li>
            <li id="YYNLSTATES">
              <strong>$YYNLSTATES</strong>
            </li>
            <li id="action">
              <strong>$action</strong>
              <br/>
              <span class="indent">@var array Table of actions. Indexed according to $actionBase comment.</span>
            </li>
            <li id="actionBase">
              <strong>$actionBase</strong>
              <br/>
              <span class="indent">@var array Map of states to a displacement into the $action table. The corresponding action for this             state/symbol pair is $action[$actionBase[$state] + $symbol]. If $actionBase[$state] is 0, the                    action is defaulted, i.e. $actionDefault[$state] should be used instead.</span>
            </li>
            <li id="actionCheck">
              <strong>$actionCheck</strong>
              <br/>
              <span class="indent">@var array Table indexed analogously to $action. If $actionCheck[$actionBase[$state] + $symbol] != $symbol             then the action is defaulted, i.e. $actionDefault[$state] should be used instead.</span>
            </li>
            <li id="actionDefault">
              <strong>$actionDefault</strong>
              <br/>
              <span class="indent">@var array Map of states to their default action</span>
            </li>
            <li id="actionTableSize">
              <strong>$actionTableSize</strong>
              <br/>
              <span class="indent">@var int Size of $action table</span>
            </li>
            <li id="defaultAction">
              <strong>$defaultAction</strong>
              <br/>
              <span class="indent">@var int Action number signifying default action</span>
            </li>
            <li id="endAttributes">
              <strong>$endAttributes</strong>
              <br/>
              <span class="indent">@var array End attributes of last *shifted* token</span>
            </li>
            <li id="errorSymbol">
              <strong>$errorSymbol</strong>
              <br/>
              <span class="indent">@var int Symbol number of error recovery token</span>
            </li>
            <li id="errors">
              <strong>$errors</strong>
              <br/>
              <span class="indent">@var Error[] Errors collected during last parse</span>
            </li>
            <li id="goto">
              <strong>$goto</strong>
              <br/>
              <span class="indent">@var array Table of states to goto after reduction. Indexed according to $gotoBase comment.</span>
            </li>
            <li id="gotoBase">
              <strong>$gotoBase</strong>
              <br/>
              <span class="indent">@var array Map of non-terminals to a displacement into the $goto table. The corresponding goto state for this             non-terminal/state pair is $goto[$gotoBase[$nonTerminal] + $state] (unless defaulted)</span>
            </li>
            <li id="gotoCheck">
              <strong>$gotoCheck</strong>
              <br/>
              <span class="indent">@var array Table indexed analogously to $goto. If $gotoCheck[$gotoBase[$nonTerminal] + $state] != $nonTerminal             then the goto state is defaulted, i.e. $gotoDefault[$nonTerminal] should be used.</span>
            </li>
            <li id="gotoDefault">
              <strong>$gotoDefault</strong>
              <br/>
              <span class="indent">@var array Map of non-terminals to the default state to goto after their reduction</span>
            </li>
            <li id="gotoTableSize">
              <strong>$gotoTableSize</strong>
              <br/>
              <span class="indent">@var int Size of $goto table</span>
            </li>
            <li id="invalidSymbol">
              <strong>$invalidSymbol</strong>
              <br/>
              <span class="indent">@var int Symbol number signifying an invalid token</span>
            </li>
            <li id="lexer">
              <strong>$lexer</strong>
              <br/>
              <span class="indent">@var Lexer Lexer that is used when parsing</span>
            </li>
            <li id="lookaheadStartAttributes">
              <strong>$lookaheadStartAttributes</strong>
              <br/>
              <span class="indent">@var array Start attributes of last *read* token</span>
            </li>
            <li id="productions">
              <strong>$productions</strong>
              <br/>
              <span class="indent">@var array Names of the production rules (only necessary for debugging)</span>
            </li>
            <li id="ruleToLength">
              <strong>$ruleToLength</strong>
              <br/>
              <span class="indent">@var array Map of rules to the length of their right-hand side, which is the number of elements that have to             be popped from the stack(s) on reduction.</span>
            </li>
            <li id="ruleToNonTerminal">
              <strong>$ruleToNonTerminal</strong>
              <br/>
              <span class="indent">@var array Map of rules to the non-terminal on their left-hand side, i.e. the non-terminal to use for             determining the state to goto after reduction.</span>
            </li>
            <li id="semStack">
              <strong>$semStack</strong>
              <br/>
              <span class="indent">@var array Semantic value stack (contains values of tokens and semantic action results)</span>
            </li>
            <li id="semValue">
              <strong>$semValue</strong>
              <br/>
              <span class="indent">@var mixed Temporary value containing the result of last semantic action (reduction)</span>
            </li>
            <li id="stackPos">
              <strong>$stackPos</strong>
              <br/>
              <span class="indent">@var int Position in stacks (state stack, semantic value stack, attribute stack)</span>
            </li>
            <li id="startAttributeStack">
              <strong>$startAttributeStack</strong>
              <br/>
              <span class="indent">@var array[] Start attribute stack</span>
            </li>
            <li id="symbolToName">
              <strong>$symbolToName</strong>
              <br/>
              <span class="indent">@var array Map of symbols to their names</span>
            </li>
            <li id="throwOnError">
              <strong>$throwOnError</strong>
              <br/>
              <span class="indent">@var bool Whether to throw on first error</span>
            </li>
            <li id="tokenToSymbol">
              <strong>$tokenToSymbol</strong>
              <br/>
              <span class="indent">@var array Map of lexer tokens to internal symbols</span>
            </li>
            <li id="tokenToSymbolMapSize">
              <strong>$tokenToSymbolMapSize</strong>
              <br/>
              <span class="indent">@var int Size of $tokenToSymbol map</span>
            </li>
            <li id="unexpectedTokenRule">
              <strong>$unexpectedTokenRule</strong>
              <br/>
              <span class="indent">@var int Rule number signifying that an unexpected token was encountered</span>
            </li>
          </ul>
        </div>
        <h2 id="methods">Methods</h2>
        <div class="styled">
          <h4>private</h4>
          <ul>
            <li id="getNamespacingStyle">
              <a title="PhpParser\ParserAbstract" href="../classes/PhpParser_ParserAbstract/getNamespacingStyle.xhtml">getNamespacingStyle()</a>
            </li>
          </ul>
          <h4>protected</h4>
          <ul>
            <li id="getErrorMessage">
              <a title="PhpParser\ParserAbstract" href="../classes/PhpParser_ParserAbstract/getErrorMessage.xhtml">getErrorMessage()</a>
            </li>
            <li id="getExpectedTokens">
              <a title="PhpParser\ParserAbstract" href="../classes/PhpParser_ParserAbstract/getExpectedTokens.xhtml">getExpectedTokens()</a>
            </li>
            <li id="handleNamespaces"><a title="PhpParser\ParserAbstract" href="../classes/PhpParser_ParserAbstract/handleNamespaces.xhtml">handleNamespaces()</a>
                — Moves statements of semicolon-style namespaces into $ns-&gt;stmts and checks various error conditions.</li>
            <li id="handleScalarTypes">
              <a title="PhpParser\ParserAbstract" href="../classes/PhpParser_ParserAbstract/handleScalarTypes.xhtml">handleScalarTypes()</a>
            </li>
          </ul>
          <h4>public</h4>
          <ul>
            <li id="__construct"><a title="PhpParser\ParserAbstract" href="../classes/PhpParser_ParserAbstract/__construct.xhtml">__construct()</a>
                — Creates a parser instance.</li>
            <li id="getErrors"><a title="PhpParser\ParserAbstract" href="../classes/PhpParser_ParserAbstract/getErrors.xhtml">getErrors()</a>
                — Get array of errors that occurred during the last parse.</li>
            <li id="parse"><a title="PhpParser\ParserAbstract" href="../classes/PhpParser_ParserAbstract/parse.xhtml">parse()</a>
                — Parses PHP code into a node tree.</li>
          </ul>
        </div>
      </section>
    </div>
    <footer>
      <span>Generated using phpDox 0.8.0 - Copyright (C) 2010 - 2016 by Arne Blankerts</span>
    </footer>
  </body>
</html>
